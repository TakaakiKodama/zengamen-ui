{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","font","hight","sizes","changeSize","Fragment","TextContainer","FlipBordWrapper","styled","div","props","FlipBord","inputLetter","writeLetter","wrap","value","onChange","e","target","console","log","LetterSizes","split","map","row","str","result","i","length","chr","charCodeAt","getLen","rowLength","Math","max","apply","colLength","min","lengthPerSize","calcSize","name","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OA4BeA,EAbO,WAAO,IAAD,EACEC,mBAAS,CAAEC,KAAM,OAAQC,MAAO,QADlC,mBACnBC,EADmB,KACZC,EADY,KAE1B,OACE,cAAC,IAAMC,SAAP,UACE,cAACC,EAAD,UACE,cAACC,EAAD,CAAiBJ,MAAOA,EAAOC,WAAYA,EAA3C,SACE,cAAC,EAAD,CAAUD,MAAOA,EAAOC,WAAYA,WASxCE,EAAgBE,IAAOC,IAAV,+JASbF,EAAkBC,IAAOC,IAAV,+OAOP,SAAAC,GAAK,OAAIA,EAAMP,MAAMD,SAGlB,SAAAQ,GAAK,OAAIA,EAAMP,MAAMF,QAIhCU,EAA4B,SAAC,GAA0B,EAAxBR,MAAyB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACxBJ,mBAAS,IADe,mBACpDY,EADoD,KACvCC,EADuC,KA2C3D,OACE,8BACE,0BAAUC,KAAK,MAAMC,MAAOH,EAAaI,SAR9B,SAACC,GACd,IAAML,EAAcK,EAAEC,OAAOH,MAC7BF,EAAYD,GACZR,EAtCe,SAACQ,GAChBO,QAAQC,IAAI,mBAiBZ,IAAMC,EAAcT,EAAYU,MAAM,MAAMC,KAAI,SAAAC,GAAG,OAhBnD,SAAgBC,GAEd,IADA,IAAIC,EAAS,EACJC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAAK,CACnC,IAAIE,EAAMJ,EAAIK,WAAWH,GAKvBD,GAJGG,GAAO,GAAQA,EAAM,KACf,QAARA,GACAA,GAAO,OAAUA,EAAM,OACvBA,GAAO,OAAUA,EAAM,MACd,GAEA,EAGd,OAAOH,EAG8CK,CAAOP,MACxDQ,EAAYC,KAAKC,IAAIC,MAAM,KAAMd,GACjCe,EAAYf,EAAYO,OAa9B,MAJuB,CACrB3B,KARoB,SAAC+B,EAAmBI,GACxC,OAAIJ,GAAaI,EACT,GAAN,OAAUH,KAAKI,IAAIF,MAAM,KAAM,CAAC,GAAI,GAAKH,IAAzC,MAEM,GAAN,OAAUC,KAAKI,IAAIF,MAAM,KAAM,CAAC,GAAI,GAAKC,IAAzC,MAIIE,CAAcN,EAAWI,GAC/BlC,MAAM,GAAD,OAAKkC,EAAL,OAOIG,CAAS3B,KAKyC4B,KAAK,GAAGC,GAAG,OAAtE,SAAgF7B,OCpFvE8B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c7ab56ec.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './App.css';\nimport styled, { css } from 'styled-components'\n\ntype Sizes = {\n  font: string\n  hight: string\n}\n\ntype Props = {\n  sizes: Sizes\n  changeSize: React.Dispatch<React.SetStateAction<Sizes>>\n}\n\n\nconst App: React.FC = () => {\n  const [sizes, changeSize] = useState({ font: \"50vw\", hight: \"1em\" })\n  return (\n    <React.Fragment>\n      <TextContainer>\n        <FlipBordWrapper sizes={sizes} changeSize={changeSize} >\n          <FlipBord sizes={sizes} changeSize={changeSize} />\n        </FlipBordWrapper>\n      </TextContainer>\n    </React.Fragment>\n  )\n}\n\nexport default App;\n\nconst TextContainer = styled.div`\n    width: 100vw;\n    height: 100vh;\n    margin: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst FlipBordWrapper = styled.div<Props>`\n  width: 100%;\n  textarea {\n    width: 100%;\n    border: none;\nã€€  outline: none;\n    overflow:hidden;\n    height: ${props => props.sizes.hight};\n    text-align: center;\n    vertical-align: middle;\n    font-size: ${props => props.sizes.font};\n  }\n`\n\nconst FlipBord: React.FC<Props> = ({ sizes, changeSize }) => {\n  const [inputLetter, writeLetter] = useState(\"\")\n  const calcSize = (inputLetter: string) => {\n    console.log(\"something wrong\")\n    function getLen(str: string) {\n      var result = 0;\n      for (var i = 0; i < str.length; i++) {\n        var chr = str.charCodeAt(i);\n        if ((chr >= 0x00 && chr < 0x81) ||\n          (chr === 0xf8f0) ||\n          (chr >= 0xff61 && chr < 0xffa0) ||\n          (chr >= 0xf8f1 && chr < 0xf8f4)) {\n          result += 0.5;\n        } else {\n          result += 1;\n        }\n      }\n      return result;\n    };\n  \n    const LetterSizes = inputLetter.split(\"\\n\").map(row => getLen(row))\n    const rowLength = Math.max.apply(null, LetterSizes)\n    const colLength = LetterSizes.length\n\n    const lengthPerSize = (rowLength: number, colLength: number) => {\n      if (rowLength >= colLength) {\n        return `${Math.min.apply(null, [50, 98 / rowLength])}vw`\n      } else {\n        return `${Math.min.apply(null, [50, 98 / colLength])}vh`\n      }\n    }\n    const newSize: Sizes = {\n      font: lengthPerSize(rowLength, colLength),\n      hight: `${colLength}em`\n    }\n    return newSize\n  }\n  const change = (e: any) => {\n    const inputLetter = e.target.value\n    writeLetter(inputLetter)\n    changeSize(calcSize(inputLetter))\n  }\n\n  return (\n    <div>\n      <textarea wrap=\"off\" value={inputLetter} onChange={change} name=\"\" id=\"flip\"  >{inputLetter}</textarea>\n    </div>\n  )\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}